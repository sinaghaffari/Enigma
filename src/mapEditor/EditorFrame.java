/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mapEditor;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.geom.Rectangle2D;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Sina
 */
public class EditorFrame extends javax.swing.JFrame implements WindowListener {

	/**
	 * Creates new form EditorFrame
	 */
	public EditorFrame() {
		//</editor-fold>

		/*
		 * Create and display the form
		 */
		addWindowListener(this);
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	private void initComponents() {
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(EditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(EditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(EditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(EditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
		jLabel4 = new javax.swing.JLabel();
		jLabel1 = new javax.swing.JLabel();
		NameField = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		LengthField = new javax.swing.JTextField();
		jLabel3 = new javax.swing.JLabel();
		HeightField = new javax.swing.JTextField();
		InitializeMapButton = new javax.swing.JButton();

		jLabel4.setText("jLabel4");

		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		setTitle("The Improbable Game ME");
		setName("The Improbable Game ME");
		setResizable(false);

		jLabel1.setText("Map Name:");

		NameField.setText("Map");

		jLabel2.setText("Map Length:");

		LengthField.setText("200");

		jLabel3.setText("Map Height:");

		HeightField.setText("200");

		ExportMapButton.setText("Export Map");
		ImportMapButton.setText("Import Map");
		ClearMapButton.setText("Clear Map");
		ExportMapButton.setEnabled(false);
		ClearMapButton.setEnabled(false);

		InitializeMapButton.setText("Initialize Map Field");
		InitializeMapButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				InitializeMapButtonActionPerformed(evt);
			}
		});
		ExportMapButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					ExportMapButtonActionPerformed(evt);
				} catch (IOException e) {}
			}
		});
		ImportMapButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					ImportMapButtonActionPerformed(evt);
				} catch (HeadlessException e) {
				} catch (FileNotFoundException e) {}
			}
		});
		ClearMapButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ClearMapButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(10, 10, 10)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(InitializeMapButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(layout.createSequentialGroup()
														.addComponent(jLabel3)
														.addGap(6, 6, 6)
														.addComponent(HeightField, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(ClearMapButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGroup(layout.createSequentialGroup()
																.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
																		.addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																		.addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
																		.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																				.addGroup(layout.createSequentialGroup()
																						.addGap(4, 4, 4)
																						.addComponent(LengthField, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																						.addComponent(ImportMapButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
																						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
																								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																								.addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
																								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																								.addComponent(ExportMapButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))))
																								.addGap(0, 0, Short.MAX_VALUE)))
																								.addContainerGap())
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(10, 10, 10)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
										.addGap(3, 3, 3)
										.addComponent(jLabel1))
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(ExportMapButton)))
												.addGap(3, 3, 3)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(layout.createSequentialGroup()
																.addGap(3, 3, 3)
																.addComponent(jLabel2))
																.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																		.addComponent(LengthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addComponent(ImportMapButton)))
																		.addGap(3, 3, 3)
																		.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																				.addGroup(layout.createSequentialGroup()
																						.addGap(3, 3, 3)
																						.addComponent(jLabel3))
																						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																								.addComponent(HeightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
																								.addComponent(ClearMapButton)))
																								.addGap(4, 4, 4)
																								.addComponent(InitializeMapButton)
																								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);
		pack();
		int w = getSize().width;
		int h = getSize().height;
		int x = (dim.width-w)/2;
		int y = (dim.height-h)/2;
		setLocation(x, y);
		setVisible(true);
	}// </editor-fold>                        


	private void ExportMapButtonActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
		if (isInteger(LengthField.getText()) && (isInteger(HeightField.getText())))
			saveMap();
	}
	private boolean isInteger( String in ) {
		try  
		{  
			Integer.parseInt( in );  
			return true;  
		}  
		catch( Exception e )  
		{  
			return false;  
		}  
	}
	private void saveMap() throws IOException {
		JFrame fileChooser = new JFrame();
		JFileChooser fc = new JFileChooser(new File("levels/"));
		fc.addChoosableFileFilter(new MyFilter());
		fileChooser.setResizable( false );
		fileChooser.setDefaultCloseOperation( JFrame.DISPOSE_ON_CLOSE );
		//int returnVal = fc.showSaveDialog(fileChooser);
		fc.setAcceptAllFileFilterUsed(false);
		fileChooser.pack();
		int w = fileChooser.getSize().width;
		int h = fileChooser.getSize().height;
		int x = (dim.width-w)/2;
		int y = (dim.height-h)/2;
		fc.setName(NameField.getText());
		fileChooser.setLocation(x, y);
		fileChooser.setVisible(true);
		//boolean alreadyGood = false;
		File saveFile = null;
		boolean good = false;
		while ((fc.showSaveDialog(fileChooser) == JFileChooser.APPROVE_OPTION))  
		{  
			saveFile = fc.getSelectedFile();
			if(!fc.getSelectedFile().getPath().toLowerCase().endsWith(".map"))
			{
				saveFile = new File(fc.getSelectedFile().getPath() + ".map");
			}
			if (saveFile.exists())  
			{
				fileChooser.dispose();
				int answer = JOptionPane.showConfirmDialog(fileChooser, "Replace existing file?", "Replace?", JOptionPane.YES_NO_OPTION);  
				if (answer != JOptionPane.OK_OPTION)  
				{
					continue;
				}
			}
			good = true;
			break;
		}
		fileChooser.dispose();
		if (good)
			initiateSave(saveFile);

	}
	private void initiateSave(File saveFile) throws IOException {
		PrintWriter out = new PrintWriter(new FileWriter(saveFile));
		out.println("MapName: \"" + NameField.getText() + "\";");
		out.println("MapLength: \"" + LengthField.getText() + "\";");
		out.println("MapHeight: \"" + HeightField.getText() + "\";");
		out.println("MapData:");
		out.print("\"");
		for (int b = 0; b < Integer.valueOf(HeightField.getText()); b++) {
			for (int a = 0; a < Integer.valueOf(LengthField.getText()); a++) {
				out.print(MapClass.getArray(a, b));
			}
			if (b != Integer.valueOf(HeightField.getText()) - 1)
				out.println();
		}
		out.print("\";");
		out.close();
	}
	private void ImportMapButtonActionPerformed(java.awt.event.ActionEvent evt) throws HeadlessException, FileNotFoundException {
		JFrame fileChooserFrame = new JFrame();
		JFileChooser fc = new JFileChooser("levels/");
		fc.addChoosableFileFilter(new MyFilter());
		fileChooserFrame.setResizable( false );
		fileChooserFrame.setDefaultCloseOperation( JFrame.DISPOSE_ON_CLOSE );
		int returnVal = fc.showOpenDialog(fileChooserFrame);
		fc.setAcceptAllFileFilterUsed(false);
		fileChooserFrame.pack();
		int w = fileChooserFrame.getSize().width;
		int h = fileChooserFrame.getSize().height;
		int x = (dim.width-w)/2;
		int y = (dim.height-h)/2;
		fileChooserFrame.setLocation(x, y);
		fileChooserFrame.setVisible(true);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			fileChooserFrame.dispose();
			if (checkMap(fc.getSelectedFile())) {
				initiateMap(fc.getSelectedFile());
			} else {
				JOptionPane.showMessageDialog(null, "That is not a valid map file.");
			}
		} else {
			fileChooserFrame.dispose();
		}
	}
	private void ClearMapButtonActionPerformed(java.awt.event.ActionEvent evt) {
		int answer = JOptionPane.showConfirmDialog(this, "Are you sure? All data will be erased.\nSave if needed.", "Are you sure?", JOptionPane.YES_NO_OPTION);  
		if (answer == JOptionPane.OK_OPTION)  
		{
			m.clearArray();
			m.repaint();
		}
	}
	public boolean checkMap( File file) throws FileNotFoundException {
		Scanner in = null;
		String cur = null;
		boolean a = false, b = false, c = false, d = false;
		String tempLength = "", tempHeight = "";
		try {
			in = new Scanner(new BufferedReader(new FileReader(file)));
			in.useDelimiter(";\n*");
			while(in.hasNext()) {
				cur = in.next();
				if (cur.contains("MapName:")) {
					a = true;
				} else if (cur.contains("MapLength:")) {
					for (int i = cur.indexOf("\"") + 1; i < cur.lastIndexOf("\""); i++) {
						tempLength += cur.charAt(i);
					}
					if (isInteger(tempLength))
						b = true;
				} else if (cur.contains("MapHeight:")) {
					for (int i = cur.indexOf("\"") + 1; i < cur.lastIndexOf("\""); i++) {
						tempHeight += cur.charAt(i);
					}
					if (isInteger(tempHeight))
						c = true;
				} else if (cur.contains("MapData:")) {
					d = true;
				}
			}
		} finally {
			if (in != null) {
				in.close();
			}
		}
		return (a && b && c && d );
	}
	private void InitializeMapButtonActionPerformed(java.awt.event.ActionEvent evt) {
boolean good1 = true, good2 = true;
		if (!isInteger(LengthField.getText()) && (!isInteger(HeightField.getText())))
			JOptionPane.showMessageDialog(null, "Please make sure that the Length and Height fields contain only numbers!");
		else if (!isInteger(LengthField.getText()))
			JOptionPane.showMessageDialog(null, "Please make sure that the Length field contains only numbers!");
		else if (!isInteger(HeightField.getText()))
			JOptionPane.showMessageDialog(null, "Please make sure that the Height field contains only numbers!");
		else {
			if (Integer.parseInt(LengthField.getText()) > 2000 || Integer.parseInt(LengthField.getText()) < 20) {
				good1 = false;
			}
			if (Integer.parseInt(HeightField.getText()) > 2000 || Integer.parseInt(HeightField.getText()) < 20) {
				good2 = false;
			}
			if (!good1 && !good2)
				JOptionPane.showMessageDialog(null, "Please make sure that the Length and Height fields are between 20 and 2000!");
			else if (!good1)
				JOptionPane.showMessageDialog(null, "Please make sure that the Length field is between 20 and 2000!");
			else if (!good2)
				JOptionPane.showMessageDialog(null, "Please make sure that the Height field is between 20 and 2000!");
			else
				initiateMap();
		}
	}                                                   
	public void initiateMap() {
		getFrameReady();
	}
	public void initiateMap( File f ) throws FileNotFoundException {
		Scanner in = null;
		String cur = null;
		int counter = 0;
		int[][] map1;
		try {
			in = new Scanner(new BufferedReader(new FileReader(f)));
			in.useDelimiter(";\n*");
			MapName = "";
			MapLength = "";
			MapHeight = "";
			MapData = "";
			while(in.hasNext()) {
				cur = in.next();
				if (cur.contains("MapName:")) {
					for (int i = cur.indexOf("\"") + 1; i < cur.lastIndexOf("\""); i++) {
						MapName += cur.charAt(i);
					}
					NameField.setText(MapName);
				} else if (cur.contains("MapLength:")) {
					for (int i = cur.indexOf("\"") + 1; i < cur.lastIndexOf("\""); i++) {
						MapLength += cur.charAt(i);
					}
					LengthField.setText(MapLength);
				} else if (cur.contains("MapHeight:")) {
					for (int i = cur.indexOf("\"") + 1; i < cur.lastIndexOf("\""); i++) {
						MapHeight += cur.charAt(i);
					}
					HeightField.setText(MapHeight);
				} else if (cur.contains("MapData:")) {
					for (int i = cur.indexOf("\"") + 1; i < cur.lastIndexOf("\""); i++) {
						MapData += cur.charAt(i);
					}
				}
			}
		} finally {
			if (in != null) {
				in.close();
			}
		}
		Scanner sc = null;
		try {
			sc = new Scanner(MapData);
			sc.useDelimiter("\n");
			map1 = new int[Integer.parseInt(MapLength)][Integer.parseInt(MapHeight)];
			while(sc.hasNext()) {
				cur = sc.next();
				for (int i = 0; i < cur.length() - 1; i++) {
					map1[i][counter] = Integer.parseInt(String.valueOf(cur.charAt(i)));
				}
				counter++;
			}
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		getFrameReady(map1);
	}
	public void getFrameReady() {
		setSize(1000, 600);
		int w = getSize().width;
		int h = getSize().height;
		int x = (dim.width-w)/2;
		int y = (dim.height-h)/2;
		setLocation(x, y);
		NameField.setEditable(false);
		LengthField.setEditable(false);
		HeightField.setEditable(false);
		InitializeMapButton.setVisible(false);
		ClearMapButton.setEnabled(true);
		ExportMapButton.setEnabled(true);
		m = new MapClass(Integer.valueOf(LengthField.getText()), Integer.valueOf(HeightField.getText()));
		mapView = new JScrollPane(m, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
		mapView.setWheelScrollingEnabled(false);
		add(mapView);
		mapView.setSize( 983, 451 );
		mapView.setLocation(5, 115);
		mapView.getVisibleRect();

	}
	public void getFrameReady( int[][] data) {
		setSize(1000, 600);
		int w = getSize().width;
		int h = getSize().height;
		int x = (dim.width-w)/2;
		int y = (dim.height-h)/2;
		setLocation(x, y);
		NameField.setEditable(false);
		LengthField.setEditable(false);
		HeightField.setEditable(false);
		InitializeMapButton.setVisible(false);
		ClearMapButton.setEnabled(true);
		ExportMapButton.setEnabled(true);
		if (mapView != null) {
			remove(mapView);
		}
		m = new MapClass(Integer.valueOf(LengthField.getText()), Integer.valueOf(HeightField.getText()));
		mapView = new JScrollPane(m, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		mapView.setWheelScrollingEnabled(false);
		add(mapView);
		mapView.setSize( 983, 451 );
		mapView.setLocation(5, 115);
		m.clearArray();
		m.setArray(data);
	}
	/**
	 * @param args the command line arguments
	 */
	// Variables declaration - do not modify                     
	private javax.swing.JTextField HeightField;
	private javax.swing.JButton InitializeMapButton;
	private javax.swing.JTextField LengthField;
	private javax.swing.JTextField NameField;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private JButton ExportMapButton = new JButton();
	private JButton ImportMapButton = new JButton();
	private JButton ClearMapButton = new JButton();
	MapClass m;
	private JScrollPane mapView;
	Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
	String MapName = "", MapLength = "", MapHeight = "", MapData = "";
	// End of variables declaration                   
	@Override
	public void windowActivated(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowClosed(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowClosing(WindowEvent e) {
		int answer = JOptionPane.showConfirmDialog(this, "Are you sure you want to return to the main menu?\nAnything unsaved will be deleted.", "Main Menu?", JOptionPane.YES_NO_OPTION);  
		if (answer == JOptionPane.YES_OPTION) {
			main.GameFrame.startFrame(false);
		}
	}

	@Override
	public void windowDeactivated(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowDeiconified(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowIconified(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowOpened(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}
}
class MyFilter extends FileFilter {
	public boolean accept(File file) {
		String filename = file.getName();
		if (file.isDirectory())
			return true;
		return filename.endsWith(".map");
	}
	public String getDescription() {
		return "*.map (Map Files)";
	}
}
